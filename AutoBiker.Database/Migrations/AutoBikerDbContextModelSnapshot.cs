// <auto-generated />
using System;
using AutoBiker.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoBiker.Database.Migrations
{
    [DbContext(typeof(AutoBikerDbContext))]
    partial class AutoBikerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoBiker.Database.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3ca10a43-c5c2-4535-a98e-eb51df682e1a",
                            AccessFailedCount = 0,
                            CIC = "123456789",
                            ConcurrencyStamp = "2900b07a-20d4-4ca2-9c35-b7077dc55490",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAED/jZvGVo4P02UN32aTqxoEomca90M6PDGCNQeJ1RCuBCyoiu86rqeCNzMOyBWAGGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("AutoBiker.Database.Entities.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "SU",
                            Name = "Suzuki"
                        },
                        new
                        {
                            Id = "HO",
                            Name = "Honda"
                        },
                        new
                        {
                            Id = "YA",
                            Name = "Yamaha"
                        },
                        new
                        {
                            Id = "KA",
                            Name = "Kawasaki"
                        },
                        new
                        {
                            Id = "DU",
                            Name = "Ducati"
                        },
                        new
                        {
                            Id = "BMW",
                            Name = "BMW"
                        },
                        new
                        {
                            Id = "HD",
                            Name = "Harley-Davidson"
                        },
                        new
                        {
                            Id = "TR",
                            Name = "Triumph"
                        },
                        new
                        {
                            Id = "KTM",
                            Name = "KTM"
                        },
                        new
                        {
                            Id = "GPX",
                            Name = "GPX"
                        });
                });

            modelBuilder.Entity("AutoBiker.Database.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BrandId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = "HO",
                            Color = "Red",
                            Name = "Honda Wave Alpha",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            BrandId = "HO",
                            Color = "Black",
                            Name = "Honda CBR 150R",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 3,
                            BrandId = "HO",
                            Color = "Red",
                            Name = "Honda CBR 250R",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            BrandId = "HO",
                            Color = "Red",
                            Name = "Honda CBR 650R",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 5,
                            BrandId = "HO",
                            Color = "Red",
                            Name = "Honda CBR 1000R",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 6,
                            BrandId = "SU",
                            Color = "Blue GP",
                            Name = "Suzuki GSX R150",
                            OriginalPrice = 50000000m,
                            Price = 45000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 7,
                            BrandId = "SU",
                            Color = "Black",
                            Name = "Suzuki GSX 250R",
                            OriginalPrice = 50000000m,
                            Price = 45000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 8,
                            BrandId = "SU",
                            Color = "Blue",
                            Name = "Suzuki GSX S150",
                            OriginalPrice = 50000000m,
                            Price = 45000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 9,
                            BrandId = "YA",
                            Color = "Black",
                            Name = "Yamaha R15v3",
                            OriginalPrice = 65000000m,
                            Price = 62000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 10,
                            BrandId = "YA",
                            Color = "Black",
                            Name = "Yamaha R15M",
                            OriginalPrice = 65000000m,
                            Price = 62000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 11,
                            BrandId = "YA",
                            Color = "Black",
                            Name = "Yamaha R1",
                            OriginalPrice = 65000000m,
                            Price = 62000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 12,
                            BrandId = "DU",
                            Color = "Red",
                            Name = "Ducati Panigale 959",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 13,
                            BrandId = "BMW",
                            Color = "White",
                            Name = "BMW S1000RR",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 14,
                            BrandId = "KA",
                            Color = "White",
                            Name = "Kawasaki Ninja 300",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 15,
                            BrandId = "KA",
                            Color = "White",
                            Name = "Kawasaki Ninja 600",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 16,
                            BrandId = "KA",
                            Color = "White",
                            Name = "Kawasaki Ninja H2",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 17,
                            BrandId = "KA",
                            Color = "White",
                            Name = "Kawasaki Ninja H2R",
                            OriginalPrice = 20000000m,
                            Price = 18000000m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d843e3f3-2456-42c3-95ba-4644d98c84e7",
                            ConcurrencyStamp = "7f1ff20c-d980-4e4d-a8b0-4e69433dd344",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "0a273554-a735-4f31-9c65-625385bf9b62",
                            ConcurrencyStamp = "814d6ca5-90d2-4234-bd38-6fe1a357dba5",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = "8e1f0d64-aa1d-472e-8c37-7d8d7e5f4701",
                            ConcurrencyStamp = "5977ac0b-c6cc-4e62-aac5-9e5ea970c6c8",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3ca10a43-c5c2-4535-a98e-eb51df682e1a",
                            RoleId = "d843e3f3-2456-42c3-95ba-4644d98c84e7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoBiker.Database.Entities.Product", b =>
                {
                    b.HasOne("AutoBiker.Database.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoBiker.Database.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoBiker.Database.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoBiker.Database.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoBiker.Database.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoBiker.Database.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
